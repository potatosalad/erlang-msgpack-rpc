%% -*- erlang -*-
TestDeps = [
    {ct_helper, ".*", {git, "git://github.com/extend/ct_helper.git", {branch, "master"}}},
    {proper, ".*", {git, "git://github.com/manopapad/proper.git", {branch, "master"}}}
],
TestErlOpts = [
    {d, 'TEST'},
    {src_dirs, ["src", "test"]},
    {parse_transform, eunit_autoexport}
],
TestPlugins = [rebar_ct_no_auto_compile_plugin],

DebugMode = case os:getenv("V") of
    V when V =:= "1"; V =:= "2"; V =:= "3" ->
        true;
    _ ->
        false
end,
Debug = fun(Command, Format, Data) ->
    case DebugMode of
        true ->
            io:format("*** rebar.config.script (~p) " ++ Format, [Command] ++ Data);
        false ->
            ok
    end
end,

PropAdd = fun(Key, Val, Config) ->
    case lists:keysearch(Key, 1, Config) of
        {value, {Key, OldVal}} ->
            NewVal = OldVal ++ Val,
            lists:keyreplace(Key, 1, Config, {Key, NewVal});
        false ->
            Config ++ [{Key, Val}]
    end
end,
PropMerge = fun(Key, Val, Config) ->
    case lists:keysearch(Key, 1, Config) of
        {value, {Key, OldVal}} ->
            NewVal = lists:foldl(fun
                ({K, V}, N) ->
                    PropAdd(K, V, N);
                (K, N) ->
                    N ++ [K]
            end, OldVal, Val),
            lists:keyreplace(Key, 1, Config, {Key, NewVal});
        false ->
            Config ++ [{Key, Val}]
    end
end,

Add = fun(Key, Val, Config) ->
    Debug(add, "~p~n", [{Key, Val}]),
    PropAdd(Key, Val, Config)
end,
Merge = fun(Key, Val, Config) ->
    Debug(merge, "~p~n", [{Key, Val}]),
    PropMerge(Key, Val, Config)
end,

case os:getenv("REBAR_TEST") of
    "1" ->
        lists:foldl(fun({Key, Val, Fun}, Config) ->
            Fun(Key, Val, Config)
        end, CONFIG, [
            {deps, TestDeps, Add},
            {erl_opts, TestErlOpts, Merge},
            {plugins, TestPlugins, Add}
        ]);
    _ ->
        CONFIG
end.
